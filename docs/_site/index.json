{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | UniOption Documentation",
    "keywords": "API Documentation You will find here the documentation of the API of the project."
  },
  "api/UniOption.Editor.html": {
    "href": "api/UniOption.Editor.html",
    "title": "Namespace UniOption.Editor | UniOption Documentation",
    "keywords": "Namespace UniOption.Editor Classes OptionDrawer"
  },
  "api/UniOption.Editor.OptionDrawer.html": {
    "href": "api/UniOption.Editor.OptionDrawer.html",
    "title": "Class OptionDrawer | UniOption Documentation",
    "keywords": "Class OptionDrawer Namespace UniOption.Editor Assembly Assembly-CSharp-Editor-firstpass.dll [CustomPropertyDrawer(typeof(Option<>), true)] public class OptionDrawer : PropertyDrawer Inheritance object GUIDrawer PropertyDrawer OptionDrawer Extension Methods OptionExtensions.ToOption<T>(T) Methods OnGUI(Rect, SerializedProperty, GUIContent) Override this method to make your own IMGUI based GUI for the property. public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters position Rect Rectangle on the screen to use for the property GUI. property SerializedProperty The SerializedProperty to make the custom GUI for. label GUIContent The label of this property."
  },
  "api/UniOption.html": {
    "href": "api/UniOption.html",
    "title": "Namespace UniOption | UniOption Documentation",
    "keywords": "Namespace UniOption Classes OptionExtensions Option<T> Structs ValueOption<T> Interfaces IOption"
  },
  "api/UniOption.IOption.html": {
    "href": "api/UniOption.IOption.html",
    "title": "Interface IOption | UniOption Documentation",
    "keywords": "Interface IOption Namespace UniOption Assembly UniOption.dll public interface IOption Extension Methods OptionExtensions.ToOption<T>(T) Properties IsNone bool IsNone { get; } Property Value bool IsSome bool IsSome { get; } Property Value bool"
  },
  "api/UniOption.Option-1.html": {
    "href": "api/UniOption.Option-1.html",
    "title": "Class Option<T> | UniOption Documentation",
    "keywords": "Class Option<T> Namespace UniOption Assembly UniOption.dll public sealed class Option<T> : IOption where T : class Type Parameters T Inheritance object Option<T> Implements IOption Extension Methods OptionExtensions.ToOption<T>(T) Properties IsNone public bool IsNone { get; } Property Value bool IsSome public bool IsSome { get; } Property Value bool None public static Option<T> None { get; } Property Value Option<T> Methods Do(Action<T>) public Option<T> Do(Action<T> ifSome) Parameters ifSome Action<T> Returns Option<T> Do(Action<T>, Action) public Option<T> Do(Action<T> ifSome, Action ifNone) Parameters ifSome Action<T> ifNone Action Returns Option<T> DoAsync(Func<T, UniTask>) public UniTask<Option<T>> DoAsync(Func<T, UniTask> ifSome) Parameters ifSome Func<T, UniTask> Returns UniTask<Option<T>> DoAsync(Func<T, UniTask>, Func<UniTask>) public UniTask<Option<T>> DoAsync(Func<T, UniTask> ifSome, Func<UniTask> ifNone) Parameters ifSome Func<T, UniTask> ifNone Func<UniTask> Returns UniTask<Option<T>> Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool Equals(Option<T>?) public bool Equals(Option<T>? obj) Parameters obj Option<T> Returns bool GetHashCode() public override int GetHashCode() Returns int IsSomeAnd(Func<T, bool>) public bool IsSomeAnd(Func<T, bool> predicate) Parameters predicate Func<T, bool> Returns bool MapValue<TResult>(Func<T, TResult>) public ValueOption<TResult> MapValue<TResult>(Func<T, TResult> map) where TResult : struct Parameters map Func<T, TResult> Returns ValueOption<TResult> Type Parameters TResult Map<TResult>(Func<T, TResult>) Maps the content of this option to another option. public Option<TResult> Map<TResult>(Func<T, TResult> map) where TResult : class Parameters map Func<T, TResult> Returns Option<TResult> Type Parameters TResult Match<TResult>(Func<T, TResult>, Func<TResult>) public TResult Match<TResult>(Func<T, TResult> some, Func<TResult> none) Parameters some Func<T, TResult> none Func<TResult> Returns TResult Type Parameters TResult OfType<TValue>() public Option<TValue> OfType<TValue>() where TValue : class Returns Option<TValue> Type Parameters TValue Or(T) public Option<T> Or(T orOption) Parameters orOption T Returns Option<T> Reduce() public T? Reduce() Returns T Reduce(Func<T>) public T Reduce(Func<T> defaultValue) Parameters defaultValue Func<T> Returns T Reduce(T) public T Reduce(T defaultValue) Parameters defaultValue T Returns T Some(T?) public static Option<T> Some(T? content) Parameters content T Returns Option<T> ToEnumerable() public IEnumerable<T> ToEnumerable() Returns IEnumerable<T> ToString() public override string ToString() Returns string Where(Func<T, bool>) public Option<T> Where(Func<T, bool> predicate) Parameters predicate Func<T, bool> Returns Option<T> WhereNot(Func<T, bool>) public Option<T> WhereNot(Func<T, bool> predicate) Parameters predicate Func<T, bool> Returns Option<T> Zip<T2>(Option<T2>) public ValueOption<(T, T2)> Zip<T2>(Option<T2> other) where T2 : class Parameters other Option<T2> Returns ValueOption<(T, T2)> Type Parameters T2 Zip<T2>(T2) public ValueOption<(T, T2)> Zip<T2>(T2 other) where T2 : struct Parameters other T2 Returns ValueOption<(T, T2)> Type Parameters T2 Operators operator ==(Option<T>?, Option<T>?) public static bool operator ==(Option<T>? a, Option<T>? b) Parameters a Option<T> b Option<T> Returns bool implicit operator Option<T>(T?) public static implicit operator Option<T>(T? content) Parameters content T Returns Option<T> operator !=(Option<T>?, Option<T>?) public static bool operator !=(Option<T>? a, Option<T>? b) Parameters a Option<T> b Option<T> Returns bool"
  },
  "api/UniOption.OptionExtensions.html": {
    "href": "api/UniOption.OptionExtensions.html",
    "title": "Class OptionExtensions | UniOption Documentation",
    "keywords": "Class OptionExtensions Namespace UniOption Assembly UniOption.dll public static class OptionExtensions Inheritance object OptionExtensions Methods Flatten<T>(Option<Option<T>>) public static Option<T> Flatten<T>(this Option<Option<T>> option) where T : class Parameters option Option<Option<T>> Returns Option<T> Type Parameters T Flatten<T>(ValueOption<ValueOption<T>>) public static ValueOption<T> Flatten<T>(this ValueOption<ValueOption<T>> option) where T : struct Parameters option ValueOption<ValueOption<T>> Returns ValueOption<T> Type Parameters T ToOption<T>(T) public static Option<T> ToOption<T>(this T content) where T : class Parameters content T Returns Option<T> Type Parameters T ToValueOption<T>(T?) public static ValueOption<T> ToValueOption<T>(this T? content) where T : struct Parameters content T? Returns ValueOption<T> Type Parameters T ToValueOption<T>(T) public static ValueOption<T> ToValueOption<T>(this T content) where T : struct Parameters content T Returns ValueOption<T> Type Parameters T"
  },
  "api/UniOption.ValueOption-1.html": {
    "href": "api/UniOption.ValueOption-1.html",
    "title": "Struct ValueOption<T> | UniOption Documentation",
    "keywords": "Struct ValueOption<T> Namespace UniOption Assembly UniOption.dll public readonly struct ValueOption<T> : IOption where T : struct Type Parameters T Implements IOption Extension Methods OptionExtensions.ToValueOption<T>(T) Properties IsNone public bool IsNone { get; } Property Value bool IsSome public bool IsSome { get; } Property Value bool None public static ValueOption<T> None { get; } Property Value ValueOption<T> Methods Do(Action<T>) public ValueOption<T> Do(Action<T> ifSome) Parameters ifSome Action<T> Returns ValueOption<T> Do(Action<T>, Action) public ValueOption<T> Do(Action<T> ifSome, Action ifNone) Parameters ifSome Action<T> ifNone Action Returns ValueOption<T> DoAsync(Func<T, UniTask>) public UniTask<ValueOption<T>> DoAsync(Func<T, UniTask> ifSome) Parameters ifSome Func<T, UniTask> Returns UniTask<ValueOption<T>> DoAsync(Func<T, UniTask>, Func<UniTask>) public UniTask<ValueOption<T>> DoAsync(Func<T, UniTask> ifSome, Func<UniTask> ifNone) Parameters ifSome Func<T, UniTask> ifNone Func<UniTask> Returns UniTask<ValueOption<T>> Equals(object?) public override bool Equals(object? other) Parameters other object Returns bool Equals(ValueOption<T>) public bool Equals(ValueOption<T> other) Parameters other ValueOption<T> Returns bool GetHashCode() public override int GetHashCode() Returns int IsSomeAnd(Func<T, bool>) public bool IsSomeAnd(Func<T, bool> predicate) Parameters predicate Func<T, bool> Returns bool MapObject<TResult>(Func<T, TResult>) public Option<TResult> MapObject<TResult>(Func<T, TResult> map) where TResult : class Parameters map Func<T, TResult> Returns Option<TResult> Type Parameters TResult Map<TResult>(Func<T, TResult>) public ValueOption<TResult> Map<TResult>(Func<T, TResult> map) where TResult : struct Parameters map Func<T, TResult> Returns ValueOption<TResult> Type Parameters TResult Match<TResult>(Func<T, TResult>, Func<TResult>) public TResult Match<TResult>(Func<T, TResult> some, Func<TResult> none) Parameters some Func<T, TResult> none Func<TResult> Returns TResult Type Parameters TResult Or(T) public ValueOption<T> Or(T orOption) Parameters orOption T Returns ValueOption<T> Reduce() public T Reduce() Returns T Reduce(Func<T>) public T Reduce(Func<T> ifNone) Parameters ifNone Func<T> Returns T Reduce(T) public T Reduce(T ifNone) Parameters ifNone T Returns T Some(T) public static ValueOption<T> Some(T obj) Parameters obj T Returns ValueOption<T> ToEnumerable() public IEnumerable<T> ToEnumerable() Returns IEnumerable<T> Where(Func<T, bool>) public ValueOption<T> Where(Func<T, bool> predicate) Parameters predicate Func<T, bool> Returns ValueOption<T> WhereNot(Func<T, bool>) public ValueOption<T> WhereNot(Func<T, bool> predicate) Parameters predicate Func<T, bool> Returns ValueOption<T> Zip<T2>(Option<T2>) public ValueOption<(T, T2)> Zip<T2>(Option<T2> other) where T2 : class Parameters other Option<T2> Returns ValueOption<(T, T2)> Type Parameters T2 Zip<T2>(T2) public ValueOption<(T, T2)> Zip<T2>(T2 other) where T2 : struct Parameters other T2 Returns ValueOption<(T, T2)> Type Parameters T2 Operators operator ==(ValueOption<T>, ValueOption<T>) public static bool operator ==(ValueOption<T> a, ValueOption<T> b) Parameters a ValueOption<T> b ValueOption<T> Returns bool implicit operator ValueOption<T>(T) public static implicit operator ValueOption<T>(T content) Parameters content T Returns ValueOption<T> operator !=(ValueOption<T>, ValueOption<T>) public static bool operator !=(ValueOption<T> a, ValueOption<T> b) Parameters a ValueOption<T> b ValueOption<T> Returns bool"
  },
  "index.html": {
    "href": "index.html",
    "title": "UniOption | UniOption Documentation",
    "keywords": "UniOption Provides an implementation of the Option type for Unity. This is similar to the Option type from Rust, or the Maybe type from Haskell. Contains types Option<T> for reference types, and ValueOption<T> for value types. Usage Option<T> provides the following methods: Some(T value): Creates a new Option of value T. Option<TResult> Map<TResult>(Func<T, TResult> map): Maps the value of the Option to a new value of type TResult. ValueOption<TResult> MapValue<TResult>(Func<T, TResult> map): Maps the value of the Option to a ValueOption of value type TResult. T Reduce(T defaultValue): Returns the value of the Option, or defaultValue if the Option is None. Option<T> Do(Action<T> ifSome, Action ifNone): Executes ifSome if the Option is Some, or ifNone if the Option is None. Option<T> Do(Action<T> ifSome): Executes ifSome if the Option is Some. async UniTask<Option<T>> DoAsync(Func<T, UniTask> ifSome): Async version of Do using UniTask. Option<T> Where(Func<T, bool> predicate): Filters the Option using the input predicate, return None if the predicate returns false. Option<T> WhereNot(Func<T, bool> predicate): Filters the Option using the input predicate, return None if the predicate returns true. Option<TValue> OfType<TValue>(): Filters the Option to only contain values of type TValue. Option<T> Or(T value): Returns the Option if it is Some, or Some(value) if the Option is None. T Match<T>(Func<T, T> some, Func<T> none): Returns the result of some if the Option is Some, or the result of none if the Option is None. IEnumerable<T> ToEnumerable(): Returns an enumerable containing the value of the Option, or an empty enumerable if the Option is None. ValueOption<T> is the same as Option<T>, but for value types. It provides the same methods, but instead of MapValue it is MapObject. Any type can be implicitly converted to an Option<T> or ValueOption<T>. null is converted to None, and any other value is converted to Some(value). Alternatively, Any reference or value type can be converted to an Option<T> or ValueOption<T> using the ToOption() and ToValueOption() extension methods. Examples Basics // Create a new Option Option<string> some = \"Hello World\"; Option<string> none = null; ValueOption<int> someValue = 42; //Perform operations on the options some.Map(s => s.ToUpper()) .Reduce(\"Default\"); .Do(s => Debug.Log(s))// Prints \"HELLO WORLD\" none.Map(s => s.ToUpper()) .Reduce(\"Default\"); .Do(s => Debug.Log(s))// Prints \"Default\" someValue.Map(i => i * 2) .Reduce(0); .Do(i => Debug.Log(i))// Prints \"84\" //Async operations some.Map(s => s.ToUpper()) .DoAsync(async s => { await UniTask.Delay(1000); Debug.Log(s); }).Forget(); Where/WhereNot var stringOption = \"TestString\".ToOption() .Where(s => s.Length > 5) .WhereNot(s => s.Length > 15) .Do(s => Debug.Log(s))// Prints \"TestString\" var intOption = 5.ToValueOption() .Where(i => i >= 5) .Do(i => Debug.Log(i))// Prints \"5\" OfType var stringOption = \"TestString\".ToOption() .OfType<string>() .Do(s => Debug.Log(s))// Prints \"TestString\" Or string nullString = null; var stringOption = nullString.ToOption() .Or(\"Default\") .Do(s => Debug.Log(s))// Prints \"Default\" Match var option = \"Hello World\".ToOption(); var result = option.Match(some: s => s.ToUpper(), none: () => \"Default\"); ToEnumerable var stringOption = \"TestString\".ToOption(); foreach (var s in stringOption.ToEnumerable()) { Debug.Log(s);// Prints \"TestString\" } Zip Returns a ValueOption<(T1,T2)> containing the result of the input function if both options are Some, or None if either option is None. var stringOption = \"TestString\".ToOption() .Zip(5);//Contains ValueTuple (\"TestString\", 5)"
  }
}