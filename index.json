{
  "api/UniOption.IOption.html": {
    "href": "api/UniOption.IOption.html",
    "title": "Interface IOption | UniOption Documentation",
    "keywords": "Interface IOption Namespace UniOption Assembly UniOption.dll public interface IOption Extension Methods OptionExtensions.ToOption<T>(T) Properties IsNone bool IsNone { get; } Property Value bool IsSome bool IsSome { get; } Property Value bool"
  },
  "api/UniOption.Option-1.html": {
    "href": "api/UniOption.Option-1.html",
    "title": "Struct Option<T> | UniOption Documentation",
    "keywords": "Struct Option<T> Namespace UniOption Assembly UniOption.dll public struct Option<T> : IOption where T : class Type Parameters T Implements IOption Extension Methods OptionExtensions.ToValueOption<T>(T) Fields None Gets an Option with a None value. public static readonly Option<T> None Field Value Option<T> Properties IsNone True if this Option has a None value; otherwise, false. public bool IsNone { get; } Property Value bool IsSome True if this Option has a Some value; otherwise, false. public bool IsSome { get; } Property Value bool Methods Do(Action<T>) Performs the specified action on the value of this Option if it has a Some value. public Option<T> Do(Action<T> ifSome) Parameters ifSome Action<T> The action to perform if this Option has a Some value. Returns Option<T> This Option. Do(Action<T>, Action) Performs the specified actions on the value of this Option based on whether it has a Some value or a None value. public Option<T> Do(Action<T> ifSome, Action ifNone) Parameters ifSome Action<T> The action to perform if this Option has a Some value. ifNone Action The action to perform if this Option has a None value. Returns Option<T> This Option. DoAsync(Func<T, UniTask>) Asynchronously performs the specified async action on the value of this Option if it has a Some value. public UniTask<Option<T>> DoAsync(Func<T, UniTask> ifSome) Parameters ifSome Func<T, UniTask> The async action to perform if this Option has a Some value. Returns UniTask<Option<T>> A UniTask representing the asynchronous operation. DoAsync(Func<T, UniTask>, Func<UniTask>) Asynchronously performs the specified async actions on the value of this Option based on whether it has a Some value or a None value. public UniTask<Option<T>> DoAsync(Func<T, UniTask> ifSome, Func<UniTask> ifNone) Parameters ifSome Func<T, UniTask> The async action to perform if this Option has a Some value. ifNone Func<UniTask> The async action to perform if this Option has a None value. Returns UniTask<Option<T>> A UniTask representing the asynchronous operation. Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool Equals(Option<T>) public bool Equals(Option<T> other) Parameters other Option<T> Returns bool GetHashCode() public override int GetHashCode() Returns int IsSomeAnd(Func<T, bool>) Checks if this Option has a Some value and satisfies the given predicate. public bool IsSomeAnd(Func<T, bool> predicate) Parameters predicate Func<T, bool> The predicate to check. Returns bool True if this Option has a Some value and satisfies the predicate; otherwise, false. MapValue<TResult>(Func<T, TResult>) Applies a mapping function to the value of this Option and returns a new ValueOption with the result. public ValueOption<TResult> MapValue<TResult>(Func<T, TResult> map) where TResult : struct Parameters map Func<T, TResult> The mapping function. Returns ValueOption<TResult> A ValueOption with the mapped value if this Option has a Some value; otherwise, a ValueOption with a None value. Type Parameters TResult The type of the result value. Map<TResult>(Func<T, TResult>) Applies a mapping function to the value of this Option and returns a new Option with the result. public Option<TResult> Map<TResult>(Func<T, TResult> map) where TResult : class Parameters map Func<T, TResult> The mapping function. Returns Option<TResult> An Option with the mapped value if this Option has a Some value; otherwise, an Option with a None value. Type Parameters TResult The type of the result value. Match<TResult>(Func<T, TResult>, Func<TResult>) Matches the value of this Option and applies the specified functions accordingly. public TResult Match<TResult>(Func<T, TResult> some, Func<TResult> none) Parameters some Func<T, TResult> The function to apply if this Option has a Some value. none Func<TResult> The function to apply if this Option has a None value. Returns TResult The result of applying the specified function to the value of this Option. Type Parameters TResult The type of the result. OfType<TValue>() Filters the value of this Option to the specified type. public Option<TValue> OfType<TValue>() where TValue : class Returns Option<TValue> An Option with the value cast to the specified type if it has a Some value and satisfies the type constraint; otherwise, an Option with a None value. Type Parameters TValue The type to filter the value. Or(T) Returns this Option if it has a Some value; otherwise, returns the specified alternative option. public Option<T> Or(T orOption) Parameters orOption T The alternative option to return if this Option has a None value. Returns Option<T> This Option if it has a Some value; otherwise, the specified alternative option. Reduce(Func<T>) Returns the value of this Option if it has a Some value; otherwise, returns the value returned by the specified function. This method is unsafe as it may throw an exception if the specified function throws an exception. It is recommended to use Match<TResult>(Func<T, TResult>, Func<TResult>) instead. public T Reduce(Func<T> defaultValue) Parameters defaultValue Func<T> The function that returns the default value to return. Returns T The value of this Option if it has a Some value; otherwise, the value returned by the specified function. Reduce(T) Returns the value of this Option if it has a Some value; otherwise, returns the specified default value. public T Reduce(T defaultValue) Parameters defaultValue T The default value to return. Returns T The value of this Option if it has a Some value; otherwise, the specified default value. Some(T) Creates a new Option with a Some value. public static Option<T> Some(T content) Parameters content T The value to wrap. Returns Option<T> An Option with the specified value. ToEnumerable() Converts this Option to an enumerable containing the value if it has a Some value; otherwise, returns an empty enumerable. public IEnumerable<T> ToEnumerable() Returns IEnumerable<T> An enumerable containing the value of this Option if it has a Some value; otherwise, an empty enumerable. ToString() public override string ToString() Returns string Where(Func<T, bool>) Filters the value of this Option based on the given predicate. This method is unsafe as it may throw an exception if the specified function throws an exception. It is recommended to use Match<TResult>(Func<T, TResult>, Func<TResult>) instead. public Option<T> Where(Func<T, bool> predicate) Parameters predicate Func<T, bool> The predicate to filter the value. Returns Option<T> This Option if it has a None value or the value satisfies the predicate; otherwise, an Option with a None value. WhereNot(Func<T, bool>) Filters the value of this Option based on the given predicate. public Option<T> WhereNot(Func<T, bool> predicate) Parameters predicate Func<T, bool> The predicate to filter the value. Returns Option<T> This Option if it has a None value or the value does not satisfy the predicate; otherwise, an Option with a None value. Zip<T2>(Option<T2>) Combines the value of this Option with the value of the specified Option into a ValueOption. public ValueOption<(T, T2)> Zip<T2>(Option<T2> other) where T2 : class Parameters other Option<T2> The other Option to zip. Returns ValueOption<(T, T2)> A ValueOption with a tuple of the values if both Options have Some values; otherwise, a ValueOption with a None value. Type Parameters T2 The type of the value in the other Option. Zip<T2>(T2) Combines the value of this Option with the specified value into a ValueOption. public ValueOption<(T, T2)> Zip<T2>(T2 other) where T2 : struct Parameters other T2 The specified value to zip. Returns ValueOption<(T, T2)> A ValueOption with a tuple of the values if this Option has a Some value; otherwise, a ValueOption with a None value. Type Parameters T2 The type of the specified value. Operators operator ==(Option<T>, Option<T>) public static bool operator ==(Option<T> a, Option<T> b) Parameters a Option<T> b Option<T> Returns bool implicit operator Option<T>(T) public static implicit operator Option<T>(T content) Parameters content T Returns Option<T> operator !=(Option<T>, Option<T>) public static bool operator !=(Option<T> a, Option<T> b) Parameters a Option<T> b Option<T> Returns bool"
  },
  "api/UniOption.OptionExtensions.html": {
    "href": "api/UniOption.OptionExtensions.html",
    "title": "Class OptionExtensions | UniOption Documentation",
    "keywords": "Class OptionExtensions Namespace UniOption Assembly UniOption.dll public static class OptionExtensions Inheritance object OptionExtensions Methods Flatten<T>(ValueOption<ValueOption<T>>) Flattens a nested ValueOption of ValueOption into a single ValueOption. public static ValueOption<T> Flatten<T>(this ValueOption<ValueOption<T>> option) where T : struct Parameters option ValueOption<ValueOption<T>> The ValueOption of ValueOption to flatten. Returns ValueOption<T> A ValueOption that is the flattened result of the ValueOption of ValueOption. Type Parameters T The type of the content. ToOption<T>(T) Converts the specified reference type content to an Option. public static Option<T> ToOption<T>(this T content) where T : class Parameters content T The content to convert. Returns Option<T> An Option with the specified content. Type Parameters T The type of the content. ToValueOption<T>(T?) Converts the nullable value type content to a ValueOption. public static ValueOption<T> ToValueOption<T>(this T? content) where T : struct Parameters content T? The nullable content to convert. Returns ValueOption<T> A ValueOption with the specified content if it has a value; otherwise, a ValueOption with a None value. Type Parameters T The type of the content. ToValueOption<T>(T) Converts the specified value type content to a ValueOption. public static ValueOption<T> ToValueOption<T>(this T content) where T : struct Parameters content T The content to convert. Returns ValueOption<T> A ValueOption with the specified content. Type Parameters T The type of the content."
  },
  "api/UniOption.ValueOption-1.html": {
    "href": "api/UniOption.ValueOption-1.html",
    "title": "Struct ValueOption<T> | UniOption Documentation",
    "keywords": "Struct ValueOption<T> Namespace UniOption Assembly UniOption.dll public readonly struct ValueOption<T> : IOption, IEquatable<ValueOption<T>> where T : struct Type Parameters T Implements IOption IEquatable<ValueOption<T>> Extension Methods OptionExtensions.ToValueOption<T>(T) Fields None Gets a ValueOption with a None value. public static readonly ValueOption<T> None Field Value ValueOption<T> Properties IsNone Gets a value indicating whether this ValueOption has a None value. public bool IsNone { get; } Property Value bool IsSome Gets a value indicating whether this ValueOption has a Some value. public bool IsSome { get; } Property Value bool Methods Do(Action<T>) Performs the specified action on the value of this ValueOption if it has a Some value. public ValueOption<T> Do(Action<T> ifSome) Parameters ifSome Action<T> The action to perform if this ValueOption has a Some value. Returns ValueOption<T> This ValueOption. Do(Action<T>, Action) Performs the specified actions on the value of this ValueOption based on whether it has a Some value or a None value. public ValueOption<T> Do(Action<T> ifSome, Action ifNone) Parameters ifSome Action<T> The action to perform if this ValueOption has a Some value. ifNone Action The action to perform if this ValueOption has a None value. Returns ValueOption<T> This ValueOption. DoAsync(Func<T, UniTask>) Asynchronously performs the specified async action on the value of this ValueOption if it has a Some value. public UniTask<ValueOption<T>> DoAsync(Func<T, UniTask> ifSome) Parameters ifSome Func<T, UniTask> The async action to perform if this ValueOption has a Some value. Returns UniTask<ValueOption<T>> A UniTask representing the asynchronous operation. DoAsync(Func<T, UniTask>, Func<UniTask>) Asynchronously performs the specified async actions on the value of this ValueOption based on whether it has a Some value or a None value. public UniTask<ValueOption<T>> DoAsync(Func<T, UniTask> ifSome, Func<UniTask> ifNone) Parameters ifSome Func<T, UniTask> The async action to perform if this ValueOption has a Some value. ifNone Func<UniTask> The async action to perform if this ValueOption has a None value. Returns UniTask<ValueOption<T>> A UniTask representing the asynchronous operation. Equals(object?) public override bool Equals(object? other) Parameters other object? Returns bool Equals(ValueOption<T>) public bool Equals(ValueOption<T> other) Parameters other ValueOption<T> Returns bool GetHashCode() public override int GetHashCode() Returns int IsSomeAnd(Func<T, bool>) Checks if this ValueOption has a Some value and satisfies the given predicate. public bool IsSomeAnd(Func<T, bool> predicate) Parameters predicate Func<T, bool> The predicate to check. Returns bool True if this ValueOption has a Some value and satisfies the predicate; otherwise, false. MapObject<TResult>(Func<T, TResult>) Applies a mapping function to the value of this ValueOption and returns a new Option with the result. public Option<TResult> MapObject<TResult>(Func<T, TResult> map) where TResult : class Parameters map Func<T, TResult> The mapping function. Returns Option<TResult> An Option with the mapped value if this ValueOption has a Some value; otherwise, an Option with a None value. Type Parameters TResult The type of the result value. Map<TResult>(Func<T, TResult>) Applies a mapping function to the value of this ValueOption and returns a new ValueOption with the result. public ValueOption<TResult> Map<TResult>(Func<T, TResult> map) where TResult : struct Parameters map Func<T, TResult> The mapping function. Returns ValueOption<TResult> A ValueOption with the mapped value if this ValueOption has a Some value; otherwise, a ValueOption with a None value. Type Parameters TResult The type of the result value. Match<TResult>(Func<T, TResult>, Func<TResult>) Matches the value of this ValueOption and applies the specified functions accordingly. public TResult Match<TResult>(Func<T, TResult> some, Func<TResult> none) Parameters some Func<T, TResult> The function to apply if this ValueOption has a Some value. none Func<TResult> The function to apply if this ValueOption has a None value. Returns TResult The result of applying the specified function to the value of this ValueOption. Type Parameters TResult The type of the result. Or(T) Returns this ValueOption if it has a Some value; otherwise, returns the specified alternative option. public ValueOption<T> Or(T orOption) Parameters orOption T The alternative option to return if this ValueOption has a None value. Returns ValueOption<T> This ValueOption if it has a Some value; otherwise, the specified alternative option. Reduce() Returns the value of this ValueOption if it has a Some value; otherwise, returns the default value of type T. public T Reduce() Returns T The value of this ValueOption if it has a Some value; otherwise, the default value of type T. Reduce(Func<T>) Returns the value of this ValueOption if it has a Some value; otherwise, returns the value returned by the specified function. public T Reduce(Func<T> ifNone) Parameters ifNone Func<T> The function that returns the value to return if this ValueOption has a None value. Returns T The value of this ValueOption if it has a Some value; otherwise, the value returned by the specified function. Reduce(T) Returns the value of this ValueOption if it has a Some value; otherwise, returns the specified value. public T Reduce(T ifNone) Parameters ifNone T The value to return if this ValueOption has a None value. Returns T The value of this ValueOption if it has a Some value; otherwise, the specified value. Some(T) Creates a new ValueOption with a Some value. public static ValueOption<T> Some(T obj) Parameters obj T The value to wrap. Returns ValueOption<T> A ValueOption with the specified value. ToEnumerable() Converts this ValueOption to an enumerable containing the value if it has a Some value; otherwise, returns an empty enumerable. public IEnumerable<T> ToEnumerable() Returns IEnumerable<T> An enumerable containing the value of this ValueOption if it has a Some value; otherwise, an empty enumerable. ToString() public override string ToString() Returns string Where(Func<T, bool>) Filters the value of this ValueOption based on the given predicate. public ValueOption<T> Where(Func<T, bool> predicate) Parameters predicate Func<T, bool> The predicate to filter the value. Returns ValueOption<T> This ValueOption if it has a None value or the value satisfies the predicate; otherwise, a ValueOption with a None value. WhereNot(Func<T, bool>) Filters the value of this ValueOption based on the given predicate. public ValueOption<T> WhereNot(Func<T, bool> predicate) Parameters predicate Func<T, bool> The predicate to filter the value. Returns ValueOption<T> This ValueOption if it has a None value or the value does not satisfy the predicate; otherwise, a ValueOption with a None value. Zip<T2>(Option<T2>) Combines the value of this ValueOption with the value of the specified Option into a ValueOption. public ValueOption<(T, T2)> Zip<T2>(Option<T2> other) where T2 : class Parameters other Option<T2> The other Option to zip. Returns ValueOption<(T, T2)> A ValueOption with a tuple of the values if both ValueOptions have Some values; otherwise, a ValueOption with a None value. Type Parameters T2 The type of the value in the other Option. Zip<T2>(T2) Combines the value of this ValueOption with the specified value into a ValueOption. public ValueOption<(T, T2)> Zip<T2>(T2 other) where T2 : struct Parameters other T2 The specified value to zip. Returns ValueOption<(T, T2)> A ValueOption with a tuple of the values if this ValueOption has a Some value; otherwise, a ValueOption with a None value. Type Parameters T2 The type of the specified value. Operators operator ==(ValueOption<T>, ValueOption<T>) public static bool operator ==(ValueOption<T> a, ValueOption<T> b) Parameters a ValueOption<T> b ValueOption<T> Returns bool implicit operator ValueOption<T>(T) public static implicit operator ValueOption<T>(T content) Parameters content T Returns ValueOption<T> operator !=(ValueOption<T>, ValueOption<T>) public static bool operator !=(ValueOption<T> a, ValueOption<T> b) Parameters a ValueOption<T> b ValueOption<T> Returns bool"
  },
  "api/UniOption.html": {
    "href": "api/UniOption.html",
    "title": "Namespace UniOption | UniOption Documentation",
    "keywords": "Namespace UniOption Classes OptionExtensions Structs Option<T> ValueOption<T> Interfaces IOption"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | UniOption Documentation",
    "keywords": "API Documentation You will find here the documentation of the API of the project."
  },
  "index.html": {
    "href": "index.html",
    "title": "UniOption | UniOption Documentation",
    "keywords": "UniOption Provides an implementation of the Option type for Unity. This is similar to the Option type from Rust, or the Maybe type from Haskell. Contains types Option<T> for reference types, and ValueOption<T> for value types. Usage Option<T> provides the following methods: Some None Map MapValue MapObject Reduce Do DoAsync (UniTask) Where WhereNot OfType Or Match ToEnumerable Zip ValueOption<T> is the same as Option<T>, but for value types. It provides the same methods, but instead of MapValue it is MapObject. Any type can be implicitly converted to an Option<T> or ValueOption<T>. null is converted to None, and any other value is converted to Some(value). Alternatively, Any reference or value type can be converted to an Option<T> or ValueOption<T> using the ToOption() and ToValueOption() extension methods. Examples Basics // Create a new Option Option<string> some = \"Hello World\"; Option<string> none = null; ValueOption<int> someValue = 42; //Perform operations on the options some.Map(s => s.ToUpper()) .Reduce(\"Default\"); .Do(s => Debug.Log(s))// Prints \"HELLO WORLD\" none.Map(s => s.ToUpper()) .Reduce(\"Default\"); .Do(s => Debug.Log(s))// Prints \"Default\" someValue.Map(i => i * 2) .Reduce(0); .Do(i => Debug.Log(i))// Prints \"84\" //Async operations some.Map(s => s.ToUpper()) .DoAsync(async s => { await UniTask.Delay(1000); Debug.Log(s); }).Forget(); Where/WhereNot var stringOption = \"TestString\".ToOption() .Where(s => s.Length > 5) .WhereNot(s => s.Length > 15) .Do(s => Debug.Log(s))// Prints \"TestString\" var intOption = 5.ToValueOption() .Where(i => i >= 5) .Do(i => Debug.Log(i))// Prints \"5\" OfType var stringOption = \"TestString\".ToOption() .OfType<string>() .Do(s => Debug.Log(s))// Prints \"TestString\" Or string nullString = null; var stringOption = nullString.ToOption() .Or(\"Default\") .Do(s => Debug.Log(s))// Prints \"Default\" Match var option = \"Hello World\".ToOption(); var result = option.Match(some: s => s.ToUpper(), none: () => \"Default\"); ToEnumerable var stringOption = \"TestString\".ToOption(); foreach (var s in stringOption.ToEnumerable()) { Debug.Log(s);// Prints \"TestString\" } Zip Returns a ValueOption<(T1,T2)> containing the result of the input function if both options are Some, or None if either option is None. var stringOption = \"TestString\".ToOption() .Zip(5);//Contains ValueTuple (\"TestString\", 5) API References API documentation can be found here."
  }
}