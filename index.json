{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | UniOption Documentation",
    "keywords": "API Documentation You will find here the documentation of the API of the project."
  },
  "api/UniOption.html": {
    "href": "api/UniOption.html",
    "title": "Namespace UniOption | UniOption Documentation",
    "keywords": "Namespace UniOption Classes Option<T> OptionExtensions Structs ValueOption<T> Interfaces IOption"
  },
  "api/UniOption.IOption.html": {
    "href": "api/UniOption.IOption.html",
    "title": "Interface IOption | UniOption Documentation",
    "keywords": "Interface IOption Namespace : UniOption Assembly : UniOption.dll Syntax public interface IOption Properties | Improve this Doc View Source IsNone Declaration bool IsNone { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSome Declaration bool IsSome { get; } Property Value Type Description System.Boolean Extension Methods OptionExtensions.ToOption<T>(T)"
  },
  "api/UniOption.Option-1.html": {
    "href": "api/UniOption.Option-1.html",
    "title": "Class Option<T> | UniOption Documentation",
    "keywords": "Class Option<T> Inheritance System.Object Option<T> Implements IOption Namespace : UniOption Assembly : UniOption.dll Syntax public sealed class Option<T> : IOption where T : class Type Parameters Name Description T Properties | Improve this Doc View Source IsNone Declaration public bool IsNone { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSome Declaration public bool IsSome { get; } Property Value Type Description System.Boolean | Improve this Doc View Source None Declaration public static Option<T> None { get; } Property Value Type Description Option <T> Methods | Improve this Doc View Source Do(Action<T>) Declaration public Option<T> Do(Action<T> ifSome) Parameters Type Name Description System.Action <T> ifSome Returns Type Description Option <T> | Improve this Doc View Source Do(Action<T>, Action) Declaration public Option<T> Do(Action<T> ifSome, Action ifNone) Parameters Type Name Description System.Action <T> ifSome System.Action ifNone Returns Type Description Option <T> | Improve this Doc View Source DoAsync(Func<T, UniTask>) Declaration public async UniTask<Option<T>> DoAsync(Func<T, UniTask> ifSome) Parameters Type Name Description System.Func <T, UniTask > ifSome Returns Type Description UniTask < Option <T>> | Improve this Doc View Source DoAsync(Func<T, UniTask>, Func<UniTask>) Declaration public async UniTask<Option<T>> DoAsync(Func<T, UniTask> ifSome, Func<UniTask> ifNone) Parameters Type Name Description System.Func <T, UniTask > ifSome System.Func < UniTask > ifNone Returns Type Description UniTask < Option <T>> | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Equals(Option<T>) Declaration public bool Equals(Option<T> obj) Parameters Type Name Description Option <T> obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source IsSomeAnd(Func<T, Boolean>) Declaration public bool IsSomeAnd(Func<T, bool> predicate) Parameters Type Name Description System.Func <T, System.Boolean > predicate Returns Type Description System.Boolean | Improve this Doc View Source Map<TResult>(Func<T, TResult>) Maps the content of this option to another option. Declaration public Option<TResult> Map<TResult>(Func<T, TResult> map) where TResult : class Parameters Type Name Description System.Func <T, TResult> map Returns Type Description Option <TResult> Type Parameters Name Description TResult | Improve this Doc View Source MapValue<TResult>(Func<T, TResult>) Declaration public ValueOption<TResult> MapValue<TResult>(Func<T, TResult> map) where TResult : struct Parameters Type Name Description System.Func <T, TResult> map Returns Type Description ValueOption <TResult> Type Parameters Name Description TResult | Improve this Doc View Source Match<TResult>(Func<T, TResult>, Func<TResult>) Declaration public TResult Match<TResult>(Func<T, TResult> some, Func<TResult> none) Parameters Type Name Description System.Func <T, TResult> some System.Func <TResult> none Returns Type Description TResult Type Parameters Name Description TResult | Improve this Doc View Source OfType<TValue>() Declaration public Option<TValue> OfType<TValue>() where TValue : class Returns Type Description Option <TValue> Type Parameters Name Description TValue | Improve this Doc View Source Or(T) Declaration public Option<T> Or(T orOption) Parameters Type Name Description T orOption Returns Type Description Option <T> | Improve this Doc View Source Reduce() Declaration public T Reduce() Returns Type Description T | Improve this Doc View Source Reduce(T) Declaration public T Reduce(T defaultValue) Parameters Type Name Description T defaultValue Returns Type Description T | Improve this Doc View Source Reduce(Func<T>) Declaration public T Reduce(Func<T> defaultValue) Parameters Type Name Description System.Func <T> defaultValue Returns Type Description T | Improve this Doc View Source Some(T) Declaration public static Option<T> Some(T content) Parameters Type Name Description T content Returns Type Description Option <T> | Improve this Doc View Source ToEnumerable() Declaration public IEnumerable<T> ToEnumerable() Returns Type Description System.Collections.Generic.IEnumerable <T> | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source Where(Func<T, Boolean>) Declaration public Option<T> Where(Func<T, bool> predicate) Parameters Type Name Description System.Func <T, System.Boolean > predicate Returns Type Description Option <T> | Improve this Doc View Source WhereNot(Func<T, Boolean>) Declaration public Option<T> WhereNot(Func<T, bool> predicate) Parameters Type Name Description System.Func <T, System.Boolean > predicate Returns Type Description Option <T> | Improve this Doc View Source Zip<T2>(T2) Declaration public ValueOption<(T, T2)> Zip<T2>(T2 other) where T2 : struct Parameters Type Name Description T2 other Returns Type Description ValueOption < System.ValueTuple <T, T2>> Type Parameters Name Description T2 | Improve this Doc View Source Zip<T2>(Option<T2>) Declaration public ValueOption<(T, T2)> Zip<T2>(Option<T2> other) where T2 : class Parameters Type Name Description Option <T2> other Returns Type Description ValueOption < System.ValueTuple <T, T2>> Type Parameters Name Description T2 Operators | Improve this Doc View Source Equality(Option<T>, Option<T>) Declaration public static bool operator ==(Option<T> a, Option<T> b) Parameters Type Name Description Option <T> a Option <T> b Returns Type Description System.Boolean | Improve this Doc View Source Implicit(T to Option<T>) Declaration public static implicit operator Option<T>(T content) Parameters Type Name Description T content Returns Type Description Option <T> | Improve this Doc View Source Inequality(Option<T>, Option<T>) Declaration public static bool operator !=(Option<T> a, Option<T> b) Parameters Type Name Description Option <T> a Option <T> b Returns Type Description System.Boolean Implements IOption Extension Methods OptionExtensions.ToOption<T>(T)"
  },
  "api/UniOption.OptionExtensions.html": {
    "href": "api/UniOption.OptionExtensions.html",
    "title": "Class OptionExtensions | UniOption Documentation",
    "keywords": "Class OptionExtensions Inheritance System.Object OptionExtensions Namespace : UniOption Assembly : UniOption.dll Syntax public static class OptionExtensions Methods | Improve this Doc View Source Flatten<T>(Option<Option<T>>) Declaration public static Option<T> Flatten<T>(this Option<Option<T>> option) where T : class Parameters Type Name Description Option < Option <T>> option Returns Type Description Option <T> Type Parameters Name Description T | Improve this Doc View Source Flatten<T>(ValueOption<ValueOption<T>>) Declaration public static ValueOption<T> Flatten<T>(this ValueOption<ValueOption<T>> option) where T : struct Parameters Type Name Description ValueOption < ValueOption <T>> option Returns Type Description ValueOption <T> Type Parameters Name Description T | Improve this Doc View Source ToOption<T>(T) Declaration public static Option<T> ToOption<T>(this T content) where T : class Parameters Type Name Description T content Returns Type Description Option <T> Type Parameters Name Description T | Improve this Doc View Source ToValueOption<T>(T) Declaration public static ValueOption<T> ToValueOption<T>(this T content) where T : struct Parameters Type Name Description T content Returns Type Description ValueOption <T> Type Parameters Name Description T | Improve this Doc View Source ToValueOption<T>(Nullable<T>) Declaration public static ValueOption<T> ToValueOption<T>(this T? content) where T : struct Parameters Type Name Description System.Nullable <T> content Returns Type Description ValueOption <T> Type Parameters Name Description T"
  },
  "api/UniOption.ValueOption-1.html": {
    "href": "api/UniOption.ValueOption-1.html",
    "title": "Struct ValueOption<T> | UniOption Documentation",
    "keywords": "Struct ValueOption<T> Implements IOption Namespace : UniOption Assembly : UniOption.dll Syntax public readonly struct ValueOption<T> : IOption, IEquatable<ValueOption<T>> where T : struct Type Parameters Name Description T Properties | Improve this Doc View Source IsNone Declaration public readonly bool IsNone { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSome Declaration public readonly bool IsSome { get; } Property Value Type Description System.Boolean | Improve this Doc View Source None Declaration public static readonly ValueOption<T> None { get; } Property Value Type Description ValueOption <T> Methods | Improve this Doc View Source Do(Action<T>) Declaration public readonly ValueOption<T> Do(Action<T> ifSome) Parameters Type Name Description System.Action <T> ifSome Returns Type Description ValueOption <T> | Improve this Doc View Source Do(Action<T>, Action) Declaration public readonly ValueOption<T> Do(Action<T> ifSome, Action ifNone) Parameters Type Name Description System.Action <T> ifSome System.Action ifNone Returns Type Description ValueOption <T> | Improve this Doc View Source DoAsync(Func<T, UniTask>) Declaration public readonly async UniTask<ValueOption<T>> DoAsync(Func<T, UniTask> ifSome) Parameters Type Name Description System.Func <T, UniTask > ifSome Returns Type Description UniTask < ValueOption <T>> | Improve this Doc View Source DoAsync(Func<T, UniTask>, Func<UniTask>) Declaration public readonly async UniTask<ValueOption<T>> DoAsync(Func<T, UniTask> ifSome, Func<UniTask> ifNone) Parameters Type Name Description System.Func <T, UniTask > ifSome System.Func < UniTask > ifNone Returns Type Description UniTask < ValueOption <T>> | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source Equals(ValueOption<T>) Declaration public readonly bool Equals(ValueOption<T> other) Parameters Type Name Description ValueOption <T> other Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source IsSomeAnd(Func<T, Boolean>) Declaration public readonly bool IsSomeAnd(Func<T, bool> predicate) Parameters Type Name Description System.Func <T, System.Boolean > predicate Returns Type Description System.Boolean | Improve this Doc View Source Map<TResult>(Func<T, TResult>) Declaration public readonly ValueOption<TResult> Map<TResult>(Func<T, TResult> map) where TResult : struct Parameters Type Name Description System.Func <T, TResult> map Returns Type Description ValueOption <TResult> Type Parameters Name Description TResult | Improve this Doc View Source MapObject<TResult>(Func<T, TResult>) Declaration public readonly Option<TResult> MapObject<TResult>(Func<T, TResult> map) where TResult : class Parameters Type Name Description System.Func <T, TResult> map Returns Type Description Option <TResult> Type Parameters Name Description TResult | Improve this Doc View Source Match<TResult>(Func<T, TResult>, Func<TResult>) Declaration public readonly TResult Match<TResult>(Func<T, TResult> some, Func<TResult> none) Parameters Type Name Description System.Func <T, TResult> some System.Func <TResult> none Returns Type Description TResult Type Parameters Name Description TResult | Improve this Doc View Source Or(T) Declaration public readonly ValueOption<T> Or(T orOption) Parameters Type Name Description T orOption Returns Type Description ValueOption <T> | Improve this Doc View Source Reduce() Declaration public readonly T Reduce() Returns Type Description T | Improve this Doc View Source Reduce(T) Declaration public readonly T Reduce(T ifNone) Parameters Type Name Description T ifNone Returns Type Description T | Improve this Doc View Source Reduce(Func<T>) Declaration public readonly T Reduce(Func<T> ifNone) Parameters Type Name Description System.Func <T> ifNone Returns Type Description T | Improve this Doc View Source Some(T) Declaration public static ValueOption<T> Some(T obj) Parameters Type Name Description T obj Returns Type Description ValueOption <T> | Improve this Doc View Source ToEnumerable() Declaration public readonly IEnumerable<T> ToEnumerable() Returns Type Description System.Collections.Generic.IEnumerable <T> | Improve this Doc View Source Where(Func<T, Boolean>) Declaration public readonly ValueOption<T> Where(Func<T, bool> predicate) Parameters Type Name Description System.Func <T, System.Boolean > predicate Returns Type Description ValueOption <T> | Improve this Doc View Source WhereNot(Func<T, Boolean>) Declaration public readonly ValueOption<T> WhereNot(Func<T, bool> predicate) Parameters Type Name Description System.Func <T, System.Boolean > predicate Returns Type Description ValueOption <T> | Improve this Doc View Source Zip<T2>(T2) Declaration public readonly ValueOption<(T, T2)> Zip<T2>(T2 other) where T2 : struct Parameters Type Name Description T2 other Returns Type Description ValueOption < System.ValueTuple <T, T2>> Type Parameters Name Description T2 | Improve this Doc View Source Zip<T2>(Option<T2>) Declaration public readonly ValueOption<(T, T2)> Zip<T2>(Option<T2> other) where T2 : class Parameters Type Name Description Option <T2> other Returns Type Description ValueOption < System.ValueTuple <T, T2>> Type Parameters Name Description T2 Operators | Improve this Doc View Source Equality(ValueOption<T>, ValueOption<T>) Declaration public static bool operator ==(ValueOption<T> a, ValueOption<T> b) Parameters Type Name Description ValueOption <T> a ValueOption <T> b Returns Type Description System.Boolean | Improve this Doc View Source Implicit(T to ValueOption<T>) Declaration public static implicit operator ValueOption<T>(T content) Parameters Type Name Description T content Returns Type Description ValueOption <T> | Improve this Doc View Source Inequality(ValueOption<T>, ValueOption<T>) Declaration public static bool operator !=(ValueOption<T> a, ValueOption<T> b) Parameters Type Name Description ValueOption <T> a ValueOption <T> b Returns Type Description System.Boolean Implements IOption Extension Methods OptionExtensions.ToValueOption<T>(T)"
  },
  "index.html": {
    "href": "index.html",
    "title": "UniOption | UniOption Documentation",
    "keywords": "UniOption Provides an implementation of the Option type for Unity. This is similar to the Option type from Rust, or the Maybe type from Haskell. Contains types Option<T> for reference types, and ValueOption<T> for value types. Usage Option<T> provides the following methods: Some(T value) : Creates a new Option of value T . Option<TResult> Map<TResult>(Func<T, TResult> map) : Maps the value of the Option to a new value of type TResult . ValueOption<TResult> MapValue<TResult>(Func<T, TResult> map) : Maps the value of the Option to a ValueOption of value type TResult . T Reduce(T defaultValue) : Returns the value of the Option, or defaultValue if the Option is None . Option<T> Do(Action<T> ifSome, Action ifNone) : Executes ifSome if the Option is Some , or ifNone if the Option is None . Option<T> Do(Action<T> ifSome) : Executes ifSome if the Option is Some . async UniTask<Option<T>> DoAsync(Func<T, UniTask> ifSome) : Async version of Do using UniTask. Option<T> Where(Func<T, bool> predicate) : Filters the Option using the input predicate, return None if the predicate returns false . Option<T> WhereNot(Func<T, bool> predicate) : Filters the Option using the input predicate, return None if the predicate returns true . Option<TValue> OfType<TValue>() : Filters the Option to only contain values of type TValue . Option<T> Or(T value) : Returns the Option if it is Some , or Some(value) if the Option is None . T Match<T>(Func<T, T> some, Func<T> none) : Returns the result of some if the Option is Some , or the result of none if the Option is None . IEnumerable<T> ToEnumerable() : Returns an enumerable containing the value of the Option, or an empty enumerable if the Option is None . ValueOption<T> is the same as Option<T> , but for value types. It provides the same methods, but instead of MapValue it is MapObject . Any type can be implicitly converted to an Option<T> or ValueOption<T> . null is converted to None , and any other value is converted to Some(value) . Alternatively, Any reference or value type can be converted to an Option<T> or ValueOption<T> using the ToOption() and ToValueOption() extension methods. Examples Basics // Create a new Option Option<string> some = \"Hello World\"; Option<string> none = null; ValueOption<int> someValue = 42; //Perform operations on the options some.Map(s => s.ToUpper()) .Reduce(\"Default\"); .Do(s => Debug.Log(s))// Prints \"HELLO WORLD\" none.Map(s => s.ToUpper()) .Reduce(\"Default\"); .Do(s => Debug.Log(s))// Prints \"Default\" someValue.Map(i => i * 2) .Reduce(0); .Do(i => Debug.Log(i))// Prints \"84\" //Async operations some.Map(s => s.ToUpper()) .DoAsync(async s => { await UniTask.Delay(1000); Debug.Log(s); }).Forget(); Where/WhereNot var stringOption = \"TestString\".ToOption() .Where(s => s.Length > 5) .WhereNot(s => s.Length > 15) .Do(s => Debug.Log(s))// Prints \"TestString\" var intOption = 5.ToValueOption() .Where(i => i >= 5) .Do(i => Debug.Log(i))// Prints \"5\" OfType var stringOption = \"TestString\".ToOption() .OfType<string>() .Do(s => Debug.Log(s))// Prints \"TestString\" Or string nullString = null; var stringOption = nullString.ToOption() .Or(\"Default\") .Do(s => Debug.Log(s))// Prints \"Default\" Match var option = \"Hello World\".ToOption(); var result = option.Match(some: s => s.ToUpper(), none: () => \"Default\"); ToEnumerable var stringOption = \"TestString\".ToOption(); foreach (var s in stringOption.ToEnumerable()) { Debug.Log(s);// Prints \"TestString\" } Zip Returns a ValueOption<(T1,T2)> containing the result of the input function if both options are Some , or None if either option is None . var stringOption = \"TestString\".ToOption() .Zip(5);//Contains ValueTuple (\"TestString\", 5)"
  }
}